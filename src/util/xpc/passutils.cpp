/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "passutils.h"
#include <QString>
#include <QObject>
#include <QInputDialog>
#include <util/xpc/util.h>
#include "interfaces/structures.h"
#include <interfaces/core/ientitymanager.h>
#include <interfaces/core/ipluginsmanager.h>
#include <interfaces/ipersistentstorageplugin.h>

namespace LeechCraft
{
namespace Util
{
	namespace
	{
		QString GetPasswordHelper (const QByteArray& key, const ICoreProxy_ptr& proxy)
		{
			const auto& result = Util::GetPersistentData (key, proxy);
			if (!result.isValid ())
			{
				qWarning () << Q_FUNC_INFO
						<< "invalid result for key"
						<< key;
				return {};
			}

			switch (result.type ())
			{
			case QVariant::String:
				return result.toString ();
			case QVariant::List:
				return result.toList ().value (0).toString ();
			case QVariant::StringList:
				return result.toStringList ().value (0);
			default:
				qWarning () << Q_FUNC_INFO
						<< "unknown result type"
						<< result.type ()
						<< result
						<< "for key"
						<< key;
				return {};
			}
		}
	}

	QString GetPassword (const QString& key, const QString& diaText,
			const ICoreProxy_ptr& proxy, bool useStored)
	{
		if (useStored)
		{
			const auto& result = GetPasswordHelper (key.toUtf8 (), proxy);
			if (!result.isNull ())
				return result;
		}

		QString result = QInputDialog::getText (0,
				"LeechCraft",
				diaText,
				QLineEdit::Password);
		if (!result.isNull ())
			SavePassword (result, key, proxy);
		return result;
	}

	void SavePassword (const QString& password, const QString& key,
			const ICoreProxy_ptr& proxy)
	{
		const auto& plugins = proxy->GetPluginsManager ()->
				GetAllCastableTo<IPersistentStoragePlugin*> ();
		for (const auto plugin : plugins)
			if (const auto& storage = plugin->RequestStorage ())
				storage->Set (key.toUtf8 (), password);
	}
}
}
