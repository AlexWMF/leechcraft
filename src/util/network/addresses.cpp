/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "addresses.h"
#include <QHostAddress>
#include <QNetworkInterface>

namespace LeechCraft
{
namespace Util
{
	AddrList_t GetLocalAddresses (int defaultPort)
	{
		AddrList_t defaultAddrs;
		const auto locals
		{
			QHostAddress::parseSubnet ("10.0.0.0/8"),
			QHostAddress::parseSubnet ("172.16.0.0/12"),
			QHostAddress::parseSubnet ("192.168.0.0/16")
		};
		for (const auto& addr : GetAllAddresses ())
			if (std::any_of (std::begin (locals), std::end (locals),
					[&addr] (decltype (*std::begin (locals)) subnet)
						{ return addr.isInSubnet (subnet); }))
				defaultAddrs.push_back ({ addr.toString (), QString::number (defaultPort) });
		return defaultAddrs;
	}

	QList<QHostAddress> GetAllAddresses ()
	{
		QList<QHostAddress> result;
		for (const auto& addr : QNetworkInterface::allAddresses ())
			if (addr.scopeId ().isEmpty ())
				result << addr;

		if (!result.contains (QHostAddress::Any))
			result << QHostAddress::Any;

		return result;
	}

}
}
