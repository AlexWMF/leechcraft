/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "editurlsdialog.h"
#include <QStandardItemModel>
#include <util/sll/slotclosure.h>
#include "editurldialog.h"

namespace LeechCraft
{
namespace XProxy
{
	namespace
	{
		QList<QStandardItem*> ReqTarget2Row (const ReqTarget& item)
		{
			QList<QStandardItem*> row
			{
				new QStandardItem { item.Host_.GetPattern () },
				new QStandardItem { item.Port_ > 0 ? QString::number (item.Port_) : "any" },
				new QStandardItem { item.Protocols_.isEmpty () ? "any" : item.Protocols_.join (" ") }
			};
			for (auto rowItem : row)
				rowItem->setEditable (false);
			return row;
		}
	}

	EditUrlsDialog::EditUrlsDialog (const QList<ReqTarget>& items, QWidget *parent)
	: QDialog { parent }
	, Items_ { items }
	, Model_ { new QStandardItemModel { this } }
	{
		Ui_.setupUi (this);

		Model_->setHorizontalHeaderLabels ({ tr ("Host"), tr ("Port"), tr ("Protocols") });
		for (const auto& item : items)
			Model_->appendRow (ReqTarget2Row (item));

		Ui_.UrlsView_->setModel (Model_);
	}

	const QList<ReqTarget>& EditUrlsDialog::GetTargets () const
	{
		return Items_;
	}

	void EditUrlsDialog::on_AddButton__released ()
	{
		const auto editDia = new EditUrlDialog { this };
		editDia->setAttribute (Qt::WA_DeleteOnClose);

		new Util::SlotClosure<Util::DeleteLaterPolicy>
		{
			[this, editDia] () -> void
			{
				const auto& reqTarget = editDia->GetReqTarget ();
				Model_->appendRow (ReqTarget2Row (reqTarget));
				Items_ << reqTarget;
			},
			editDia,
			SIGNAL (accepted ()),
			editDia
		};

		editDia->show ();
	}

	void EditUrlsDialog::on_EditButton__released ()
	{
		const auto& idx = Ui_.UrlsView_->currentIndex ();
		if (!idx.isValid ())
			return;

		const auto rowIdx = idx.row ();

		const auto editDia = new EditUrlDialog { this };
		editDia->setAttribute (Qt::WA_DeleteOnClose);
		editDia->SetReqTarget (Items_.value (rowIdx));

		new Util::SlotClosure<Util::DeleteLaterPolicy>
		{
			[this, editDia, rowIdx] () -> void
			{
				const auto& reqTarget = editDia->GetReqTarget ();
				const auto row = ReqTarget2Row (reqTarget);
				if (rowIdx < Items_.size ())
				{
					for (int i = 0; i < row.size (); ++i)
						Model_->setItem (rowIdx, i, row.at (i));
					Items_ [rowIdx] = reqTarget;
				}
				else
				{
					Model_->appendRow (row);
					Items_ << reqTarget;
				}
			},
			editDia,
			SIGNAL (accepted ()),
			editDia
		};

		editDia->show ();
	}

	void EditUrlsDialog::on_RemoveButton__released ()
	{
		const auto& idx = Ui_.UrlsView_->currentIndex ();
		if (!idx.isValid ())
			return;

		Items_.removeAt (idx.row ());
		Model_->removeRow (idx.row ());
	}
}
}
