/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "editlistsdialog.h"
#include <QInputDialog>
#include <QMessageBox>
#include <QStandardItemModel>
#include "scriptsmanager.h"
#include "urllistscript.h"

namespace LeechCraft
{
namespace XProxy
{
	EditListsDialog::EditListsDialog (const QList<UrlListScript*>& scripts,
			const ScriptsManager *manager, QWidget *parent)
	: QDialog { parent }
	, Model_ { new QStandardItemModel { this } }
	, Manager_ { manager }
	, Scripts_ { scripts }
	{
		Model_->setHorizontalHeaderLabels ({ tr ("Script name") });

		Ui_.setupUi (this);
		Ui_.ListsView_->setModel (Model_);

		for (const auto script : scripts)
		{
			const auto item = new QStandardItem { script->GetListName () };
			item->setEditable (false);
			Model_->appendRow (item);
		}
	}

	const QList<UrlListScript*>& EditListsDialog::GetScripts () const
	{
		return Scripts_;
	}

	void EditListsDialog::on_AddButton__released ()
	{
		auto unaddedScripts = Manager_->GetScripts ();
		for (auto script : Scripts_)
			unaddedScripts.removeOne (script);

		if (unaddedScripts.isEmpty ())
		{
			QMessageBox::critical (this,
					"LeechCraft",
					tr ("No new scripts can be added."));
			return;
		}

		QStringList names;
		for (const auto script : unaddedScripts)
			names << script->GetListName ();

		const auto& item = QInputDialog::getItem (this,
				tr ("Add a script"),
				tr ("Select a script or dynamic list to add:"),
				names,
				0,
				false);
		const auto idx = names.indexOf (item);
		if (idx < 0)
			return;

		const auto script = unaddedScripts.value (idx);
		Scripts_ << script;
		const auto modelItem = new QStandardItem { script->GetListName () };
		modelItem->setEditable (false);
		Model_->appendRow (modelItem);
	}

	void EditListsDialog::on_RemoveButton__released ()
	{
		const auto& row = Ui_.ListsView_->currentIndex ().row ();
		if (row < 0 || row >= Scripts_.size ())
			return;

		Scripts_.removeAt (row);
		Model_->removeRow (row);
	}
}
}
