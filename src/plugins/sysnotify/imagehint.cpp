/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "imagehint.h"
#include <QImage>
#include <QDBusArgument>

namespace LeechCraft
{
namespace Sysnotify
{
	ImageHint::ImageHint (const QImage& image)
	: Width_ { image.width () }
	, Height_ { image.height () }
	, RowStride_ { image.bytesPerLine () }
	, HasAlpha_ { image.hasAlphaChannel () }
	, Channels_ { HasAlpha_ ? 4 : 3 }
	, BPS_ { image.depth () / Channels_ }
	, Data_ { reinterpret_cast<char*> (image.rgbSwapped ().bits ()), image.numBytes () }
	{
	}

	QDBusArgument& operator<< (QDBusArgument& arg, const ImageHint& hint)
	{
		arg.beginStructure ();
		arg << hint.Width_
				<< hint.Height_
				<< hint.RowStride_
				<< hint.HasAlpha_
				<< hint.BPS_
				<< hint.Channels_
				<< hint.Data_;
		arg.endStructure ();
		return arg;
	}

	const QDBusArgument& operator>> (const QDBusArgument& arg, ImageHint& hint)
	{
		arg.beginStructure ();
		arg >> hint.Width_
				>> hint.Height_
				>> hint.RowStride_
				>> hint.HasAlpha_
				>> hint.BPS_
				>> hint.Channels_
				>> hint.Data_;
		arg.endStructure ();
		return arg;
	}
}
}
