/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "viewcolumnsmanager.h"
#include <memory>
#include <QHeaderView>
#include <QEvent>
#include <QtDebug>

namespace LeechCraft
{
namespace Snails
{
	ViewColumnsManager::ViewColumnsManager (QHeaderView *view)
	: QObject { view }
	, View_ { view}
	{
		View_->setStretchLastSection (false);
		connect (View_,
				SIGNAL (sectionCountChanged (int, int)),
				this,
				SLOT (handleSectionCountChanged (int, int)));
		connect (View_,
				SIGNAL (sectionResized (int, int, int)),
				this,
				SLOT (handleSectionResized (int, int, int)));

		View_->installEventFilter (this);
	}

	void ViewColumnsManager::SetStretchColumn (int column)
	{
		StretchColumn_ = column;
	}

	void ViewColumnsManager::SetDefaultWidth (int idx, int width)
	{
		ColumnWidths_ [idx] = width;
	}

	void ViewColumnsManager::SetDefaultWidths (const QList<int>& widths)
	{
		ColumnWidths_ = widths;
	}

	void ViewColumnsManager::SetDefaultWidths (const QStringList& strings)
	{
		auto font = View_->font ();
		font.setBold (true);
		const QFontMetrics fm { font };

		QList<int> widths;

		for (const auto& string : strings)
			widths << fm.width (string);

		SetDefaultWidths (widths);
	}

	bool ViewColumnsManager::eventFilter (QObject *object, QEvent *event)
	{
		if (event->type () == QEvent::Resize)
			readjustWidths ();

		return QObject::eventFilter (object, event);
	}

	void ViewColumnsManager::readjustWidths ()
	{
		IgnoreResizes_ = true;
		const std::shared_ptr<void> ignoreGuard
		{
			nullptr,
			[this] (void*) { IgnoreResizes_ = false; }
		};

		const auto scrollBarWidth = View_->style ()->pixelMetric (QStyle::PM_ScrollBarExtent);
		auto remainingWidth = View_->width () - scrollBarWidth;

		for (int i = 0; i < ColumnWidths_.size (); ++i)
		{
			if (i == StretchColumn_)
				continue;

			View_->resizeSection (i, ColumnWidths_.at (i));
			remainingWidth -= ColumnWidths_.at (i);
		}

		if (StretchColumn_ >= 0)
		{
			remainingWidth = std::max (20, remainingWidth);
			View_->resizeSection (StretchColumn_, remainingWidth);
		}
	}

	void ViewColumnsManager::handleSectionResized (int index, int, int newSize)
	{
		if (IgnoreResizes_)
			return;

		if (index == StretchColumn_)
			StretchColumn_ = -1;

		ColumnWidths_ [index] = newSize;
	}

	void ViewColumnsManager::handleSectionCountChanged (int, int newCount)
	{
		if (newCount != ColumnWidths_.size ())
			return;

		readjustWidths ();
	}
}
}
