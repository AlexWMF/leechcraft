/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "mailmodel.h"
#include <util/util.h>

namespace LeechCraft
{
namespace Snails
{
	struct MailModel::TreeNode
	{
		QByteArray FolderID_;

		QByteArray MsgID_;

		TreeNode_wptr Parent_;
		QList<TreeNode_ptr> Children_;

		int Row () const
		{
			const auto& parent = Parent_.lock ();
			if (!parent)
				return -1;

			const auto pos = std::find_if (parent->Children_.begin (), parent->Children_.end (),
					[this] (const TreeNode_ptr& other) { return other.get () == this; });
			if (pos == parent->Children_.end ())
			{
				qWarning () << Q_FUNC_INFO
						<< "unknown row for item"
						<< FolderID_;
				return -1;
			}

			return std::distance (parent->Children_.begin (), pos);
		}

		TreeNode () = default;

		TreeNode (const Message_ptr& msg, const TreeNode_ptr& parent)
		: FolderID_ { msg->GetFolderID () }
		, MsgID_ { msg->GetMessageID () }
		, Parent_ { parent }
		{
		}
	};

	MailModel::MailModel (QObject *parent)
	: QAbstractItemModel { parent }
	, Headers_ { tr ("From"), tr ("Subject"), tr ("Date"), tr ("Size")  }
	, Folder_ { "INBOX" }
	, Root_ { std::make_shared<TreeNode> () }
	{
	}

	QVariant MailModel::headerData (int section, Qt::Orientation orient, int role) const
	{
		if (orient != Qt::Horizontal || role != Qt::DisplayRole)
			return {};

		return Headers_.value (section);
	}

	int MailModel::columnCount (const QModelIndex&) const
	{
		return Headers_.size ();
	}

	QVariant MailModel::data (const QModelIndex& index, int role) const
	{
		const auto structItem = static_cast<TreeNode*> (index.internalPointer ());
		if (structItem == Root_.get ())
			return {};

		const auto& msg = GetMessageByFolderId (structItem->FolderID_);
		if (!msg)
		{
			qWarning () << Q_FUNC_INFO
					<< "no message for ID"
					<< structItem->FolderID_;
			return {};
		}

		switch (role)
		{
		case Qt::DisplayRole:
		case Sort:
			break;
		case ID:
			return msg->GetFolderID ();
		case ReadStatus:
			return msg->IsRead ();
		default:
			return {};
		}

		switch (static_cast<Column> (index.column ()))
		{
		case Column::From:
			return GetNiceMail (msg->GetAddress (Message::Address::From));
		case Column::Subject:
			return msg->GetSubject ();
		case Column::Date:
			if (role == Sort)
				return msg->GetDate ();
			else
				return msg->GetDate ().toString ();
		case Column::Size:
			if (role == Sort)
				return msg->GetSize ();
			else
				return Util::MakePrettySize (msg->GetSize ());
		default:
			return {};
		}
	}

	QModelIndex MailModel::index (int row, int column, const QModelIndex& parent) const
	{
		const auto structItem = parent.isValid () ?
				static_cast<TreeNode*> (parent.internalPointer ()) :
				Root_.get ();
		const auto childItem = structItem->Children_.value (row).get ();
		if (!childItem)
			return {};

		return createIndex (row, column, childItem);
	}

	QModelIndex MailModel::parent (const QModelIndex& index) const
	{
		if (!index.isValid ())
			return {};

		const auto structItem = static_cast<TreeNode*> (index.internalPointer ());
		const auto& parentItem = structItem->Parent_.lock ();
		if (parentItem == Root_)
			return {};

		return createIndex (parentItem->Row (), 0, parentItem.get ());
	}

	int MailModel::rowCount (const QModelIndex& parent) const
	{
		const auto structItem = parent.isValid () ?
				static_cast<TreeNode*> (parent.internalPointer ()) :
				Root_.get ();
		return structItem->Children_.size ();
	}

	void MailModel::SetFolder (const QStringList& folder)
	{
		Folder_ = folder;
	}

	QStringList MailModel::GetCurrentFolder () const
	{
		return Folder_;
	}

	void MailModel::Clear ()
	{
		if (Messages_.isEmpty ())
			return;

		beginRemoveRows ({}, 0, Messages_.size () - 1);
		Messages_.clear ();
		Root_->Children_.clear ();
		FolderId2Node_.clear ();
		endRemoveRows ();
	}

	void MailModel::Append (QList<Message_ptr> messages)
	{
		if (messages.isEmpty ())
			return;

		for (auto i = messages.begin (); i != messages.end (); )
		{
			const auto& msg = *i;

			if (!msg->GetFolders ().contains (Folder_))
			{
				i = messages.erase (i);
				continue;
			}

			if (Update (msg))
			{
				i = messages.erase (i);
				continue;
			}

			++i;
		}

		if (messages.isEmpty ())
			return;

		const auto rc = Messages_.size ();
		Messages_ += messages;

		emit beginInsertColumns ({}, rc, rc + messages.size () - 1);
		for (const auto& msg : messages)
		{
			const auto& item = std::make_shared<TreeNode> (msg, Root_);
			Root_->Children_.append (item);
			FolderId2Node_ [msg->GetFolderID ()] = item;
		}
		emit endInsertRows ();
	}

	bool MailModel::Update (const Message_ptr& msg)
	{
		const auto pos = std::find_if (Messages_.begin (), Messages_.end (),
				[&msg] (const Message_ptr& other) { return other->GetFolderID () == msg->GetFolderID (); });
		if (pos == Messages_.end ())
			return false;

		if (*pos != msg)
		{
			*pos = msg;
			emit dataChanged (GetIndex (msg->GetFolderID (), 0),
					GetIndex (msg->GetFolderID (), columnCount () - 1));
		}

		return true;
	}

	bool MailModel::Remove (const QByteArray& id)
	{
		const auto msgPos = std::find_if (Messages_.begin (), Messages_.end (),
				[&id] (const Message_ptr& other) { return other->GetFolderID () == id; });
		if (msgPos == Messages_.end ())
			return false;

		const auto& node = FolderId2Node_.value (id);
		const auto& parent = node->Parent_.lock ();

		const auto row = node->Row ();
		const auto& parentIndex = GetIndex (parent->FolderID_, 0);
		beginRemoveRows (parentIndex, row, row);
		Messages_.erase (msgPos);
		parent->Children_.removeOne (node);
		FolderId2Node_.remove (id);
		endRemoveRows ();

		return true;
	}

	QModelIndex MailModel::GetIndex (const QByteArray& folderId, int column) const
	{
		const auto& node = FolderId2Node_.value (folderId);
		if (!node)
			return {};

		return createIndex (node->Row (), column, node.get ());
	}

	Message_ptr MailModel::GetMessageByFolderId (const QByteArray& id) const
	{
		const auto pos = std::find_if (Messages_.begin (), Messages_.end (),
				[&id] (const Message_ptr& msg) { return msg->GetFolderID () == id; });
		if (pos == Messages_.end ())
			return {};

		return *pos;
	}
}
}
