/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QFutureInterface>
#include "taskqueuemanager.h"

namespace LeechCraft
{
namespace Snails
{
	template<typename T>
	class ConcurrentExceptionMixin : public QtConcurrent::Exception
	{
	public:
		void raise () const override
		{
			throw *dynamic_cast<const T*> (this);
		}

		Exception* clone () const override
		{
			return new T { *dynamic_cast<const T*> (this) };
		}
	};

	class InvokeFailedException : public ConcurrentExceptionMixin<InvokeFailedException>
	{
		const TaskQueueItem Item_;
		const QByteArray What_;
	public:
		InvokeFailedException (const TaskQueueItem&);
		~InvokeFailedException () noexcept = default;

		const char* what () const noexcept override;
	};

	class AuthorizationException : public ConcurrentExceptionMixin<AuthorizationException>
	{
		const QString Message_;
	public:
		AuthorizationException (const QString&);
		~AuthorizationException () noexcept = default;

		const QString& GetMessage () const;
	};

	class TimeoutException : public ConcurrentExceptionMixin<TimeoutException>
	{
	public:
		TimeoutException () = default;
		~TimeoutException () noexcept = default;
	};

	template<typename Wrapped>
	class WrappedException : public ConcurrentExceptionMixin<WrappedException<Wrapped>>
	{
		const Wrapped W_;
	public:
		WrappedException (const Wrapped& w)
		: W_ { w }
		{
		}

		~WrappedException () noexcept = default;

		const char* what () const noexcept override
		{
			return W_.what ();
		}
	};

	template<typename Wrapped>
	WrappedException<Wrapped> MakeWrappedException (const Wrapped& e)
	{
		return { e };
	}
}
}
