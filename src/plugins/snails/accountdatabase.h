/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <boost/optional.hpp>
#include <memory>
#include <QObject>
#include <QSqlQuery>
#include <QStringList>
#include <QMap>

class QSqlDatabase;
typedef std::shared_ptr<QSqlDatabase> QSqlDatabase_ptr;

class QDir;

namespace LeechCraft
{
namespace Snails
{
	class Account;

	class Message;
	typedef std::shared_ptr<Message> Message_ptr;

	class AccountDatabase : public QObject
	{
		const QSqlDatabase_ptr DB_;

		QSqlQuery QueryGetIds_;
		QSqlQuery QueryGetCount_;
		QSqlQuery QueryGetUnreadCount_;
		QSqlQuery QueryGetTotalCount_;
		QSqlQuery QueryRemoveMessage_;
		QSqlQuery QueryAddFolder_;

		/* Returns the primary key of a message by its
		 * folder-local ID and folder path.
		 */
		QSqlQuery QueryGetMsgTableIdByFolder_;

		/* Returns the primary key of a message by its
		 * global unique ID.
		 */
		QSqlQuery QueryGetMsgTableIdByUniqueId_;

		QSqlQuery QuerySetMsgRead_;

		QSqlQuery QueryAddMsgUnfoldered_;
		QSqlQuery QueryAddMsgToFolder_;

		QMap<QStringList, int> KnownFolders_;
	public:
		AccountDatabase (const QDir&, Account*, QObject* = nullptr);

		QList<QByteArray> GetIDs (const QStringList& folder);
		int GetMessageCount (const QStringList& folder);
		int GetUnreadMessageCount (const QStringList& folder);
		int GetMessageCount ();

		void AddMessage (const Message_ptr&);
		void RemoveMessage (const QByteArray& msgId, const QStringList& folder,
				const std::function<void ()>& continuation = {});

		boost::optional<int> GetMsgTableId (const QByteArray& uniqueId);
		boost::optional<int> GetMsgTableId (const QByteArray& msgId, const QStringList& folder);
	private:
		int AddMessageUnfoldered (const Message_ptr&);
		void UpdateMessage (int, const Message_ptr&);
		void AddMessageToFolder (int msgTableId, int folderTableId, const QByteArray& msgId);

		void InitTables ();
		void PrepareQueries ();

		int AddFolder (const QStringList&);
		int GetFolder (const QStringList&) const;
		void LoadKnownFolders ();
	};
}
}
