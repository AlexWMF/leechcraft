/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "inverteffect.h"
#include <QPainter>
#include <QtDebug>
#include <qwebview.h>

namespace LeechCraft
{
namespace Poshuku
{
namespace DCAC
{
	InvertEffect::InvertEffect (QWebView *view)
	: QGraphicsEffect { view }
	{
	}

	void InvertEffect::SetThreshold (int threshold)
	{
		if (threshold == Threshold_)
			return;

		Threshold_ = threshold;
		update ();
	}

	void InvertEffect::draw (QPainter *painter)
	{
		QPoint offset;

		const auto& sourcePx = sourcePixmap (Qt::LogicalCoordinates, &offset);
		auto image = sourcePx.toImage ();
		switch (image.format ())
		{
		case QImage::Format_ARGB32:
		case QImage::Format_ARGB32_Premultiplied:
			break;
		default:
			image = image.convertToFormat (QImage::Format_ARGB32);
			break;
		}
		image.detach ();

		uint64_t sourceGraySumR = 0, sourceGraySumG = 0, sourceGraySumB = 0;

		const auto height = image.height ();
		const auto width = image.width ();
		for (int y = 0; y < height; ++y)
		{
			const auto scanline = reinterpret_cast<QRgb*> (image.scanLine (y));
			for (int x = 0; x < width; ++x)
			{
				auto& color = scanline [x];
				sourceGraySumR += qRed (color);
				sourceGraySumG += qGreen (color);
				sourceGraySumB += qBlue (color);

				color &= 0x00ffffff;
				color = uint32_t { 0xffffffff } - color;
			}
		}

		const auto sourceGraySum = (sourceGraySumR * 11 + sourceGraySumG * 16 + sourceGraySumB * 5) / (width * height * 32);

		if (sourceGraySum >= static_cast<uint64_t> (Threshold_))
			painter->drawImage (offset, image);
		else
			painter->drawPixmap (offset, sourcePx);
	}
}
}
}
