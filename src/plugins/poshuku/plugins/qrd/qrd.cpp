/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "qrd.h"
#include <qwebview.h>
#include <QMessageBox>
#include <QApplication>
#include <QDesktopWidget>
#include <QLabel>
#include <qrencode.h>
#include <util/util.h>

namespace LeechCraft
{
namespace Poshuku
{
namespace QRd
{
	void Plugin::Init (ICoreProxy_ptr)
	{
		Util::InstallTranslator ("poshuku_qrd");
	}

	void Plugin::SecondInit ()
	{
	}

	void Plugin::Release ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Poshuku.QRd";
	}

	QString Plugin::GetName () const
	{
		return "Poshuku QRd";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Shows the QR code with the URL of an opened web page.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	QSet<QByteArray> Plugin::GetPluginClasses () const
	{
		QSet<QByteArray> result;
		result << "org.LeechCraft.Poshuku.Plugins/1.0";
		return result;
	}

	void Plugin::hookWebViewContextMenu (IHookProxy_ptr,
			QWebView *view, QContextMenuEvent*, const QWebHitTestResult&,
			QMenu *menu, WebViewCtxMenuStage menuBuildStage)
	{
		if (menuBuildStage != WVSAfterFinish)
			return;

		const auto& url = view->url ();
		if (url.isEmpty ())
			return;

		const auto act = menu->addAction (tr ("Generate QR code..."),
				this, SLOT (genQR ()));
		act->setProperty ("Poshuku/QRd/URL", url);
	}

	void Plugin::genQR ()
	{
		const auto& url = sender ()->property ("Poshuku/QRd/URL").toUrl ();

		const std::unique_ptr<QRcode, decltype (&QRcode_free)> code
		{
			QRcode_encodeString (url.toEncoded ().constData (),
					0, QR_ECLEVEL_H, QR_MODE_8, true),
			&QRcode_free
		};

		if (!code)
		{
			QMessageBox::critical (nullptr,
					"LeechCraft",
					tr ("Failed to generate QR code for the page."));
			return;
		}

		const auto width = code->width;
		QImage image { width, width, QImage::Format_Mono };
		image.setColor (0, QColor { Qt::white }.rgb ());
		image.setColor (1, QColor { Qt::black }.rgb ());
		for (int y = 0; y < width; ++y)
			for (int x = 0; x < width; ++x)
				image.setPixel (x, y, code->data [y * width + x] & 0x01);

		const auto& geom = QApplication::desktop ()->availableGeometry (QCursor::pos ());
		const auto& dim = std::min (geom.width (), geom.height ());
		if (dim < width)
		{
			QMessageBox::critical (nullptr,
					"LeechCraft",
					tr ("Sorry, but the QR code is bigger than your display."));
			return;
		}

		auto scale = (width < 2.0 * dim / 3) ? (2.0 * dim / 3 / width) : dim / width;
		if (scale > 1)
			image = image.scaled (width * scale, width * scale, Qt::KeepAspectRatio, Qt::FastTransformation);

		auto label = new QLabel;
		label->setAttribute (Qt::WA_DeleteOnClose);
		label->setPixmap (QPixmap::fromImage (image));
		label->show ();
	}
}
}
}

LC_EXPORT_PLUGIN (leechcraft_poshuku_qrd, LeechCraft::Poshuku::QRd::Plugin);
