/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <QObject>
#include <QVariantList>
#include <QModelIndexList>
#include <QIcon>
#include "interfaces/lmp/ifilterelement.h"
#include "interfaces/lmp/ifilterplugin.h"

class QStandardItemModel;
class QAbstractItemModel;
class QByteArray;

namespace LeechCraft
{
namespace LMP
{
	class IPath;
	class Path;
	class RGFilterController;

	struct SavedFilterInfo
	{
		QByteArray FilterId_;
		QByteArray InstanceId_;
	};

	QDataStream& operator<< (QDataStream&, const SavedFilterInfo&);
	QDataStream& operator>> (QDataStream&, SavedFilterInfo&);

	class EffectsManager : public QObject
	{
		Q_OBJECT

		QStandardItemModel * const Model_;

		Path * const Path_;

		std::shared_ptr<RGFilterController> RGFilter_;

		QList<EffectInfo> RegisteredEffects_;
		QList<IFilterElement*> Filters_;
	public:
		EffectsManager (Path*, QObject* = 0);

		QAbstractItemModel* GetEffectsModel () const;

		void RegisterEffect (const EffectInfo&);

		void RegisteringFinished ();
	private:
		IFilterElement* RestoreFilter (const QList<EffectInfo>::const_iterator, const QByteArray&);
		void UpdateHeaders ();
		void SaveFilters () const;

		void ReemitEffectsList ();
	public slots:
		void showEffectConfig (int);

		void addRequested (const QString&, const QVariantList&);
		void removeRequested (const QString&, const QModelIndexList&);

		void customButtonPressed (const QString&, const QByteArray&, int);
	signals:
		void effectsListChanged (const QStringList&);
	};
}
}

Q_DECLARE_METATYPE (LeechCraft::LMP::SavedFilterInfo)
Q_DECLARE_METATYPE (QList<LeechCraft::LMP::SavedFilterInfo>)
