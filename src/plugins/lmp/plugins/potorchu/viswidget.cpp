/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "viswidget.h"
#include <QVBoxLayout>
#include <QMouseEvent>
#include <QTimer>
#include <QGLWidget>
#include <QtDebug>

namespace LeechCraft
{
namespace LMP
{
namespace Potorchu
{
	VisWidget::VisWidget (QWidget *parent)
	: QGraphicsView { parent }
	, Timer_ { new QTimer { this } }
	{
		connect (Timer_,
				SIGNAL (timeout ()),
				this,
				SIGNAL (redrawRequested ()));

		setViewport (new QGLWidget { QGLFormat { QGL::SampleBuffers } });
		setViewportUpdateMode (QGraphicsView::FullViewportUpdate);
	}

	void VisWidget::SetFps (int fps)
	{
		const bool isRunning = Timer_->isActive ();
		if (isRunning)
			Timer_->stop ();
		Timer_->setInterval (1000.0 / fps);
		if (isRunning)
			Timer_->start ();
	}

	void VisWidget::hideEvent (QHideEvent *event)
	{
		Timer_->stop ();
		QWidget::hideEvent (event);
	}

	void VisWidget::showEvent (QShowEvent *event)
	{
		Timer_->start ();
		QGraphicsView::showEvent (event);
	}

	void VisWidget::resizeEvent (QResizeEvent *event)
	{
		QGraphicsView::resizeEvent (event);

		if (scene ())
			scene ()->setSceneRect ({ { 0, 0 }, event->size () });
	}

	void VisWidget::mouseReleaseEvent (QMouseEvent *event)
	{
		switch (event->button ())
		{
		case Qt::LeftButton:
			emit nextVis ();
			break;
		case Qt::RightButton:
			emit prevVis ();
			break;
		default:
			QWidget::mouseReleaseEvent (event);
			break;
		}
	}
}
}
}
