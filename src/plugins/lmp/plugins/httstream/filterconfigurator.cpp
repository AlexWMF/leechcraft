/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "filterconfigurator.h"
#include <QStringListModel>
#include <QTimer>
#include <QHostAddress>
#include <QtDebug>
#include <util/xsd/util.h>
#include <util/network/addresses.h>
#include <xmlsettingsdialog/xmlsettingsdialog.h>
#include "util/lmp/filtersettingsmanager.h"
#include "httpstreamfilter.h"

namespace LeechCraft
{
namespace LMP
{
namespace HttStream
{
	FilterConfigurator::FilterConfigurator (const QString& instanceId, HttpStreamFilter *parent)
	: QObject { parent }
	, InstanceId_ { instanceId }
	, FSM_ { new FilterSettingsManager { instanceId, this } }
	, Filter_ { parent }
	{
		Util::XmlSettingsDialog dia;
		dia.RegisterObject (FSM_, "lmphttstreamfiltersettings.xml");
		FillAddressModel (&dia);

		FSM_->RegisterObject ("EncQuality", this, "handleEncQualityChanged");
		QTimer::singleShot (0,
				this,
				SLOT (handleEncQualityChanged ()));

		FSM_->RegisterObject ({ "Address", "Port" }, this, "handleAddressChanged");
		QTimer::singleShot (0,
				this,
				SLOT (handleAddressChanged ()));
	}

	void FilterConfigurator::OpenDialog ()
	{
		const auto xsd = Util::OpenXSD (tr ("HTTP streaming settings"), "lmphttstreamfiltersettings.xml", FSM_);
		FillAddressModel (xsd);
	}

	void FilterConfigurator::FillAddressModel (Util::XmlSettingsDialog *xsd)
	{
		QStringList addresses;
		for (const auto& addr : Util::GetAllAddresses ())
			addresses << addr.toString ();
		qDebug () << Q_FUNC_INFO << addresses;
		xsd->SetDataSource ("Address", new QStringListModel { addresses, xsd });
	}

	void FilterConfigurator::handleAddressChanged ()
	{
		const auto& addr = FSM_->property ("Address").toString ();
		const auto port = FSM_->property ("Port").toInt ();
		Filter_->SetAddress (addr, port);
	}

	void FilterConfigurator::handleEncQualityChanged ()
	{
		const auto quality = FSM_->property ("EncQuality").toDouble ();
		Filter_->SetQuality (quality);
	}
}
}
}

