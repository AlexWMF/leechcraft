/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2012  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QObject>
#include "interfaces/lmp/ilmpproxy.h"
#include "interfaces/lmp/ilmputilproxy.h"
#include "interfaces/lmp/ilmpguiproxy.h"

namespace LeechCraft
{
namespace LMP
{
	class PlayerTab;

	class LMPUtilProxy : public QObject
					   , public ILMPUtilProxy
	{
		Q_OBJECT
		Q_INTERFACES (LeechCraft::LMP::ILMPUtilProxy)
	public:
		QString FindAlbumArt (const QString&, bool) const;
		QList<QFileInfo> RecIterateInfo (const QString&, bool, std::atomic<bool>*) const;
		QMap<QString, std::function<QString (MediaInfo)>> GetSubstGetters () const;
		QMap<QString, std::function<void (MediaInfo&, QString)>> GetSubstSetters () const;
		QString PerformSubstitutions (QString, const MediaInfo&, SubstitutionFlags) const;
	};

	class LMPGuiProxy : public QObject
					  , public ILMPGuiProxy
	{
		Q_OBJECT
		Q_INTERFACES (LeechCraft::LMP::ILMPGuiProxy)

		PlayerTab *PlayerTab_ = nullptr;
	public:
		void SetPlayerTab (PlayerTab*);

		void AddCurrentSongTab (const QString&, QWidget*) const;
	};

	class LMPProxy : public QObject
				   , public ILMPProxy
	{
		Q_OBJECT
		Q_INTERFACES (LeechCraft::LMP::ILMPProxy)

		LMPUtilProxy UtilProxy_;
		LMPGuiProxy GuiProxy_;
	public:
		ILocalCollection* GetLocalCollection () const;
		ITagResolver* GetTagResolver () const;
		const ILMPUtilProxy* GetUtilProxy () const;
		const ILMPGuiProxy* GetGuiProxy () const;
		LMPGuiProxy* GetGuiProxy ();

		void PreviewRelease (const QString& artist, const QString& release,
				const QList<QPair<QString, int>>& tracks) const;
	};
}
}
