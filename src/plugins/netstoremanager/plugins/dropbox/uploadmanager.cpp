/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2013  Oleg Linkin <MaledictusDeMagog@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "uploadmanager.h"
#include <QNetworkAccessManager>
#include <QFileInfo>
#include <util/util.h>
#include "account.h"
#include "core.h"

namespace LeechCraft
{
namespace NetStoreManager
{
namespace DBox
{
	UploadManager::UploadManager (const QString& path,
			UploadType ut, const QByteArray& parentid, Account *account,
			const QByteArray& id)
	: QObject (account)
	, Account_ (account)
	, FilePath_ (path)
	, NAM_ (new QNetworkAccessManager (this))
	, ParentId_ (parentid)
	, Id_ (id)
	{
		connect (Account_->GetDriveManager (),
				SIGNAL (uploadProgress (qint64, qint64, QString)),
				this,
				SLOT (handleUploadProgress (qint64, qint64, QString)));
		connect (Account_->GetDriveManager (),
				SIGNAL (uploadStatusChanged (QString, QString)),
				this,
				SLOT (handleStatusChanged (QString, QString)));
		connect (Account_->GetDriveManager (),
				SIGNAL (uploadError (QString, QString)),
				this,
				SLOT (handleError  (QString, QString)));
		//TODO
		connect (Account_->GetDriveManager (),
				SIGNAL (finished (QString, QString)),
				this,
				SLOT (handleFinished (QString, QString)));

		if (ut == UploadType::Upload)
			InitiateUploadSession ();
		else if (ut == UploadType::Update)
			InitiateUpdateSession ();
	}

	void UploadManager::InitiateUploadSession ()
	{
		Account_->GetDriveManager ()->Upload (FilePath_, ParentId_);
	}

	void UploadManager::InitiateUpdateSession ()
	{
		//TODO
		Account_->GetDriveManager ()->RemoveEntry (Id_.value (0).toUtf8 ());
		Account_->GetDriveManager ()->Upload (FilePath_, ParentId_);
	}

	void UploadManager::handleError (const QString& error, const QString& filePath)
	{
		if (filePath != FilePath_)
			return;

		emit uploadError (error, FilePath_);
		deleteLater ();
	}

	void UploadManager::handleUploadProgress (qint64 sent,
			qint64 total, const QString& filePath)
	{
		if (filePath != FilePath_)
			return;

		emit uploadProgress (sent, total, FilePath_);
	}

	void UploadManager::handleStatusChanged (const QString& status,
			const QString& filePath)
	{
		if (filePath != FilePath_)
			return;

		emit uploadStatusChanged (status, FilePath_);
	}

	void UploadManager::handleFinished (const QString& id, const QString& filePath)
	{
		if (filePath != FilePath_)
			return;

		emit uploadStatusChanged (tr ("Finished"), FilePath_);
		emit finished (id.toUtf8 (), FilePath_);
		deleteLater ();
	}
}
}
}
