/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "commands.h"
#include <QStringList>
#include <QtDebug>
#include <interfaces/azoth/iclentry.h>
#include <interfaces/azoth/imucentry.h>
#include <interfaces/azoth/iproxyobject.h>

namespace LeechCraft
{
namespace Azoth
{
namespace MuCommands
{
	namespace
	{
		void InjectMessage (IProxyObject *azothProxy, ICLEntry *entry, const QString& contents)
		{
			const auto entryObj = entry->GetQObject ();
			const auto msgObj = azothProxy->CreateCoreMessage (contents,
					QDateTime::currentDateTime (),
					IMessage::MTServiceMessage,
					IMessage::DIn,
					entryObj,
					entryObj);
			const auto msg = qobject_cast<IMessage*> (msgObj);
			msg->Store ();
		}
	}

	bool HandleNames (IProxyObject *azothProxy, ICLEntry *entry, const QString&)
	{
		const auto mucEntry = qobject_cast<IMUCEntry*> (entry->GetQObject ());

		QStringList names;
		for (const auto obj : mucEntry->GetParticipants ())
		{
			ICLEntry *entry = qobject_cast<ICLEntry*> (obj);
			if (!entry)
			{
				qWarning () << Q_FUNC_INFO
						<< obj
						<< "doesn't implement ICLEntry";
				continue;
			}
			const QString& name = entry->GetEntryName ();
			if (!name.isEmpty ())
				names << name;
		}
		names.sort ();

		const auto& contents = QObject::tr ("MUC's participants: ") + "<ul><li>" +
				names.join ("</li><li>") + "</li></ul>";
		InjectMessage (azothProxy, entry, contents);

		return true;
	}

	namespace
	{
		QStringList GetAllUrls (IProxyObject *azothProxy, ICLEntry *entry)
		{
			QStringList urls;
			for (const auto msgObj : entry->GetAllMessages ())
			{
				const auto msg = qobject_cast<IMessage*> (msgObj);
				switch (msg->GetMessageType ())
				{
				case IMessage::MTChatMessage:
				case IMessage::MTMUCMessage:
					break;
				default:
					continue;
				}

				urls += azothProxy->FindLinks (msg->GetBody ());
			}
			return urls;
		}
	}

	bool ListUrls (IProxyObject *azothProxy, ICLEntry *entry, const QString&)
	{
		const auto& urls = GetAllUrls (azothProxy, entry);

		const auto& body = urls.isEmpty () ?
				QObject::tr ("Sorry, no links found, chat more!") :
				QObject::tr ("Found links:") + "<ol><li>" + urls.join ("</li><li>") + "</li></ol>";
		InjectMessage (azothProxy, entry, body);

		return true;
	}
}
}
}
