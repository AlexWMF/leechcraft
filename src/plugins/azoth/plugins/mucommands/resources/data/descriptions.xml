<descs>
	<command name="/names">
		<desc>Shows the nick names of multiuser chat room participants.</desc>
	</command>
	<command name="/urls">
		<desc>Lists the URLs appeared in the current chat session.</desc>
		<help>Usage: @/urls@

Returns the ordered list of all URLs that appeared in the current chat session. Duplicates are omitted. The indexes of the URLs can be passed as parameters to @/openurl@ and @/fetchurl@ commands.</help>
	</command>
	<command name="/openurl">
		<desc>Opens an URL from the current chat session by its index.</desc>
		<help>Usage: @/openurl@ _[idx1]_ _[idx2]_ ...

Opens the URLs identified by their indexes in the list returned by the @/urls@ command. Multiple indexes can be given. If no indexes are given, the last URL is opened.</help>
	</command>
	<command name="/fetchurl">
		<desc>Downloads an URL from the current chat session by its index.</desc>
		<help>Usage: @/fetchurl@ _[idx1]_ _[idx2]_ ...

Downloads the URLs identified by their indexes in the list returned by the @/urls@ command. Multiple indexes can be given. If no indexes are given, the last URL is downloaded.</help>
	</command>
	<command name="/vcard">
		<desc>Shows VCards for the given participants, or a roster entry, or any protocol user identified by their ID.</desc>
		<help>Usage: @/vcard@ _[id1]_
_[id2]_...

Shows (and fetches, if required) VCards for the users identified by _id_. Multiple IDs could be given, separated by line breaks.

An ID is resolved in the following way:
# If the command is issued in a multiuser chat room, the ID is matched against the nicknames of the participants on the room.
# The ID is matched against names and protocol-specific IDs (like JIDs) of participants in the roster.
# If the protocol plugin supports that, the ID is resolved as a global entry ID in the protocol, even if it is not present in the roster.

If no ID is given, the author of last message is considered in case of a multiuser chat, or the current contact in case of a standard private chat.</help>
	</command>
	<command name="/version">
		<desc>Shows the information about a participant or contact's software.</desc>
		<help>Usage: @/version@ _[id1]_
_[id2]_...

See the documentation for the @/vcard@ command regarding resolving IDs.</help>
	</command>
	<command name="/time">
		<desc>Shows the current time of a participant or a contact or a remote ID.</desc>
		<help>Usage: @/time@ _[id1]_
_[id2]_...

For each ID, their respective timezone, the local time in their timezone and their UTC time is returned.

See the documentation for the @/vcard@ command regarding resolving IDs.</help>
	</command>
	<command name="/disco">
		<desc>Opens the service discovery tab for the given participant or ID.</desc>
		<help>Usage: @/disco@ _[id1]_
_[id2]_...

See the documentation for the @/vcard@ command regarding resolving IDs.</help>
	</command>
	<command name="/nick">
		<desc>Changes the nickname used in the current multiuser chat room.</desc>
		<help>Usage: @/nick@ _new nick_</help>
	</command>
	<command name="/subject">
		<desc>Changes the subject in the current multiuser chat room.</desc>
		<help>Usage: @/subject@ _The new room subject._

The subject may span multiple lines.

Please note that in most protocols there is no reliable way to know if MUC subject may be changed in advance. Thus, this command will try its best to guess if subject change is allowed, but it still may silently fail.</help>
	</command>
	<command name="/leave">
		<desc>Leaves the current multiuser chat room.</desc>
		<help>Usage: @/leave@ _[leave message]_</help>
	</command>
	<command name="/rejoin">
		<desc>Leaves the current multiuser chat room and then joins it again.</desc>
		<help>Usage: @/rejoin@ _[leave message]_</help>
	</command>
	<command name="/ping">
		<desc>Pings the given contact and shows the round trip time of the ping request.</desc>
		<help>Usage: @/ping@ _[id1]_
_[id2]_ ...

See the documentation for the @/vcard@ command regarding resolving IDs.</help>
	</command>
	<command name="/last">
		<desc>Shows the time of last activity, or connection, or uptime.</desc>
		<help>Usage: @/last@ _[id1]_
_[id2]_ ...

See the documentation for the @/vcard@ command regarding resolving IDs.

If the resolved ID is a contact, then either last activity time or last connection time are reported, depending on the protocol pecularities. If the resolved ID is a server, its uptime is returned.</help>
	</command>
	<command name="/invite">
		<desc>Invites a roster entry into a multiuser chat room.</desc>
		<help>Usage: @/invite@ _id_ _[reason]_

If the command is issued in a private chat, the _id_ is interpreted as a MUC room ID, and the other part of the current private chat is invited to that MUC.

If the command is issued in a MUC, the _id_ is resolved just like in @/vcard@ case, and the resolved entry is invited to the current MUC.</help>
	</command>
	<command name="/pm">
		<desc>Sends a private message to a participant of the current multiuser chat room.</desc>
		<help>Usage: @/pm@ _nickname_
_Message text_

The text can consist of multiple lines, depending on the protocol.</help>
	</command>
	<command name="/whois">
		<desc>Shows the real ID of a multiuser chat participant, if available.</desc>
		<help>Usage: @/whois@ _nickname_</help>
	</command>
	<command name="/listperms">
		<desc>Lists the available permission classes and roles for the current multiuser chat room.</desc>
		<help>Usage: @/listperms@

This command shows the list of available permission classes (like role and affiliation in case of XMPP) for the current multiuser chat room, as well as the available permission values for each of the classes.

The listed classes and values can be passed to the @/setperm@ command.

@/listperms@ can be issued both in the room itself and in any private chat with one of its participants.</help>
	</command>
	<command name="/setperm">
		<desc>Sets the permissions (like affiliation or role in case of XMPP) of a given participant in a multiuser chat room.</desc>
		<help>Usage: @/setperm@ _permclass_ _perm_ &lt;@nick@|@id@> &lt;_nick_|_id_>
_[reason]_

It should be explicitly stated whether currently present participant nickname is mentioned or some protocol-defined ID string (like a JID in case of XMPP). The @nick@ argument is used in the former case, and @id@ â€” in the latter.

The list of available permission classes and permissions for a given protocol may be obtained via the @/listperms@ command.

Please note that you may type only first few letters of a permission class and value for _permclass_ and _perm_ parameters respectively, if only one string starts with the corresponding letters.

@/setperm@ can be issued both in the room itself and in any private chat with one of its participants.</help>
	</command>
	<command name="/kick">
		<desc>Kicks the given participant from the current multiuser chat room.</desc>
		<help>Usage: @/kick@ _nickname_[|_reason_]

This is a shortcut for kicking the given participant by its nickname.</help>
	</command>
	<command name="/ban">
		<desc>Bans the given participant from the current multiuser chat room.</desc>
		<help>Usage: @/ban@ _nickname_[|_reason_]

This is a shortcut for ban the given participant by its nickname.</help>
	</command>
</descs>
