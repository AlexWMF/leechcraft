/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "descparser.h"
#include <QFile>
#include <QDomDocument>
#include <QtDebug>
#include <interfaces/azoth/iprovidecommands.h>

namespace LeechCraft
{
namespace Azoth
{
namespace MuCommands
{
	DescParser::DescParser ()
	{
		QFile file { ":/azoth/mucommands/resources/data/descriptions.xml" };
		if (!file.open (QIODevice::ReadOnly))
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to open descriptions file"
					<< file.errorString ();
			return;
		}

		QDomDocument doc;
		QString msg;
		int line = 0;
		int column = 0;
		if (!doc.setContent (&file, &msg, &line, &column))
		{
			qWarning () << Q_FUNC_INFO
					<< "cannot parse descriptions file"
					<< msg
					<< line
					<< column;
			return;
		}

		auto cmdElem = doc.documentElement ().firstChildElement ("command");
		while (!cmdElem.isNull ())
		{
			const auto& name = cmdElem.attribute ("name");

			const auto& descr = cmdElem.firstChildElement ("desc").text ();
			auto help = cmdElem.firstChildElement ("help").text ();
			help.replace ("\n\n", "<br/><br/>");

			Cmd2Desc_ [name] = Desc { descr, help };

			cmdElem = cmdElem.nextSiblingElement ("command");
		}
	}

	void DescParser::operator() (StaticCommand& cmd) const
	{
		const auto& desc = Cmd2Desc_.value (cmd.Names_.first ());
		cmd.Description_ = desc.Description_;
		cmd.Help_ = desc.Help_;
	}
}
}
}
