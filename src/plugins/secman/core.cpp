/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "core.h"
#include <interfaces/iplugin2.h>
#include <interfaces/secman/istorageplugin.h>

namespace LeechCraft
{
namespace SecMan
{
	Core::Core ()
	{
	}

	Core& Core::Instance ()
	{
		static Core c;
		return c;
	}

	QSet<QByteArray> Core::GetExpectedPluginClasses () const
	{
		return QSet<QByteArray> () << "org.LeechCraft.SecMan.StoragePlugins/1.0";
	}

	void Core::AddPlugin (QObject *plugin)
	{
		IPlugin2 *ip2 = qobject_cast<IPlugin2*> (plugin);
		if (!ip2)
		{
			qWarning () << Q_FUNC_INFO
					<< "passed object is not a IPlugin2"
					<< plugin;
			return;
		}

		QSet<QByteArray> classes = ip2->GetPluginClasses ();
		if (classes.contains ("org.LeechCraft.SecMan.StoragePlugins/1.0"))
			AddStoragePlugin (plugin);
	}

	QObjectList Core::GetStoragePlugins () const
	{
		return { GetStoragePlugin () };
	}

	void Core::AddStoragePlugin (QObject *plugin)
	{
		if (!qobject_cast<IStoragePlugin*> (plugin))
		{
			qWarning () << Q_FUNC_INFO
					<< "passed object is not a IStoragePlugin"
					<< plugin;
			return;
		}
		StoragePlugins_ << plugin;
	}

	void Core::Store (const QByteArray& key, const QVariant& value)
	{
		const auto storage = GetStoragePlugin ();
		if (!storage)
		{
			qWarning () << Q_FUNC_INFO
					<< "null storage";
			return;
		}

		qobject_cast<IStoragePlugin*> (storage)->Save (key, value, IStoragePlugin::STSecure);
	}

	QVariant Core::Load (const QByteArray& key)
	{
		const auto storage = GetStoragePlugin ();
		if (!storage)
		{
			qWarning () << Q_FUNC_INFO
					<< "null storage";
			return {};
		}

		for (const auto storage : StoragePlugins_)
		{
			const auto& loaded = qobject_cast<IStoragePlugin*> (storage)->Load (key, IStoragePlugin::STSecure);
			if (!loaded.isNull ())
				return loaded;
		}

		return {};
	}

	QObject* Core::GetStoragePlugin () const
	{
		return StoragePlugins_.value (0);
	}
}
}
