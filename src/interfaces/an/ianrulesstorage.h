/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include <QtPlugin>

class QString;

template<typename T>
class QList;

namespace LeechCraft
{
	struct Entity;
}

/** @brief Interface for plugins managing Advanced Notifications rules.
 *
 * This interface should be implemented by plugins that provide means to
 * store and manage the Advanced Notifications rules. Other plugins may
 * use this interface to query for different rules and their options.
 */
class IANRulesStorage
{
public:
	virtual ~IANRulesStorage () {}

	/** @brief Returns all rules matching the \em category.
	 *
	 * The category can be either one of the predefined categories (like
	 * LeechCraft::AN::CatIM) or empty, in which case all the rules are
	 * returned.
	 *
	 * @param[in] category The category of the rules to return, or empty
	 * for all rules.
	 * @return The list of all rules matching the given \em category.
	 */
	virtual QList<LeechCraft::Entity> GetAllRules (const QString& category) const = 0;

	/** @brief Requests opening the configuration of the given \em rule.
	 *
	 * @param[in] rule One of the rules returned from GetAllRules().
	 */
	virtual void RequestRuleConfiguration (const LeechCraft::Entity& rule) = 0;
protected:
	/** @brief Emitted when the rules change.
	 *
	 * This signal is emitted either when a new rule has been added, or an
	 * already existing rule has been deleted or modified.
	 *
	 * @note This function is expected to be a signal.
	 */
	virtual void rulesChanged () = 0;
};

Q_DECLARE_INTERFACE (IANRulesStorage, "org.LeechCraft.IANRulesStorage/1.0");
